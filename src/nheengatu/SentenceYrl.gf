--1 Sentence: Sentences, Clauses, and Imperatives

concrete SentenceYrl of Sentence = CatYrl ** open Prelude, ResYrl in {

--2 Clauses

-- The $NP VP$ predication rule form a clause whose linearization
-- gives a table of all tense variants, positive and negative.
-- Clauses are converted to $S$ (with fixed tense) with the
-- $UseCl$ function below.

  lin
    -- PredVP    : NP -> VP -> Cl ;         -- John walks
    PredVP np vp = {
      s = \\p => subjPron ++ polStr ! p ++ vp.s ! np.a
      } where {
        subjPron = case <np.isPron,vp.l> of {
          <True, Stage> => np.sg3poss ; -- Empty string again, for avoiding metavariables
          _ => np.s ! Full } ;
        polStr : Polarity => Str =
          table {Pos => [] ; Neg => "ti"} ;
      } ; -- just guessing

-- Using an embedded sentence as a subject is treated separately.
-- This can be overgenerating. E.g. "whether you go" as subject
-- is only meaningful for some verb phrases.
{-

    -- PredSCVP  : SC -> VP -> Cl ;         -- that she goes is good
    PredSCVP = cc2 ;

--2 Clauses missing object noun phrases

-- This category is a variant of the 'slash category' $S/NP$ of
-- GPSG and categorial grammars, which in turn replaces
-- movement transformations in the formation of questions
-- and relative clauses. Except $SlashV2$, the construction
-- rules can be seen as special cases of function composition, in
-- the style of CCG.
-- *Note* the set is not complete and lacks e.g. verbs with more than 2 places.

    -- SlashVP   : NP -> VPSlash -> ClSlash ;      -- (whom) he sees
    SlashVP = cc2 ;
    -- AdvSlash  : ClSlash -> Adv -> ClSlash ;     -- (whom) he sees today
    AdvSlash = cc2 ;
    -- SlashPrep : Cl -> Prep -> ClSlash ;         -- (with whom) he walks
    SlashPrep = cc2 ;
    -- SlashVS   : NP -> VS -> SSlash -> ClSlash ; -- (whom) she says that he loves
    SlashVS = cc3 ;

--2 Imperatives

-- An imperative is straightforwardly formed from a verb phrase.
-- It has variation over positive and negative, singular and plural.
-- To fix these parameters, see [Phrase Phrase.html].

    -- ImpVP     : VP -> Imp ;              -- love yourselves
    ImpVP = id SS ;

--2 Embedded sentences

-- Sentences, questions, and infinitival phrases can be used as
-- subjects and (adverbial) complements.

    -- EmbedS    : S  -> SC ;               -- that she goes
    EmbedS = id SS ;
    -- EmbedQS   : QS -> SC ;               -- who goes
    EmbedQS = id SS ;
    -- EmbedVP   : VP -> SC ;               -- to go
    EmbedVP = id SS ;

--2 Sentences

-- These are the 2 x 4 x 4 = 16 forms generated by different
-- combinations of tense, polarity, and
-- anteriority, which are defined in [``Common`` Common.html].
-}
    -- UseCl    : Temp -> Pol -> Cl  -> S ;   -- she had not slept
    UseCl t p cl = {s = t.s ++ p.s ++ cl.s ! p.p} ;

    {-
    -- UseQCl   : Temp -> Pol -> QCl -> QS ;  -- who had not slept
    UseQCl = cc3 ;
    -- UseRCl   : Temp -> Pol -> RCl -> RS ;  -- that had not slept
    UseRCl = cc3 ;
    -- UseSlash : Temp -> Pol -> ClSlash -> SSlash ; -- (that) she had not seen
    UseSlash = cc3 ;

-- An adverb can be added to the beginning of a sentence, either with comma ("externally")
-- or without:

    -- AdvS     : Adv -> S  -> S ;            -- then I will go home
    AdvS = cc2 ;
    -- ExtAdvS  : Adv -> S  -> S ;            -- next week, I will go home
    ExtAdvS = cc2 ;

-- This covers subjunctive clauses, but they can also be added to the end.

    -- SSubjS    : S -> Subj -> S -> S ;       -- I go home, if she comes
    SSubjS = cc3 ;

-- A sentence can be modified by a relative clause referring to its contents.

    -- RelS     : S -> RS -> S ;              -- she sleeps, which is good
    RelS = cc2 ;
-}

}
